{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\viswa\\\\Downloads\\\\Latex resume writer ai\\\\frontend\\\\src\\\\components\\\\ModelSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = {\n  container: {\n    marginBottom: '8px'\n  },\n  select: {\n    width: '100%',\n    padding: '8px 10px',\n    borderRadius: '6px',\n    border: '1px solid #d1d5db',\n    backgroundColor: 'white',\n    fontSize: '13px',\n    outline: 'none',\n    cursor: 'pointer',\n    marginBottom: '4px'\n  },\n  label: {\n    display: 'block',\n    fontSize: '12px',\n    fontWeight: '600',\n    marginBottom: '4px',\n    color: '#4b5563'\n  },\n  description: {\n    fontSize: '11px',\n    color: '#6b7280',\n    fontStyle: 'italic',\n    marginTop: '2px'\n  }\n};\nfunction ModelSelector({\n  selectedModel,\n  onModelChange\n}) {\n  _s();\n  const [models, setModels] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchModels = async () => {\n      try {\n        setIsLoading(true);\n        setError(null); // Reset error state on new fetch attempt\n        const response = await axios.get('http://localhost:5001/ai/models');\n        if (response.data && response.data.models) {\n          setModels(response.data.models);\n\n          // Set default model if none selected and models are available\n          if (!selectedModel && response.data.models.length > 0) {\n            // Ensure the default model exists before setting it\n            const defaultModelExists = response.data.models.some(model => model.id === 'gpt4.1');\n            onModelChange(defaultModelExists ? 'gpt4.1' : response.data.models[0].id);\n          } else if (selectedModel && !response.data.models.some(model => model.id === selectedModel)) {\n            // If the currently selected model is no longer available, switch to the first available one\n            onModelChange(response.data.models.length > 0 ? response.data.models[0].id : null);\n          }\n        } else {\n          // Handle cases where the response might be successful but data is missing\n          console.error('Failed to fetch AI models: Invalid response structure', response.data);\n          setError('Failed to load AI models (Invalid response)');\n        }\n      } catch (err) {\n        // Log the detailed error object\n        console.error('Failed to fetch AI models:', err);\n        // Check for specific error types if needed (e.g., network error, server error)\n        if (err.response) {\n          // The request was made and the server responded with a status code\n          // that falls out of the range of 2xx\n          console.error('Server responded with error:', err.response.status, err.response.data);\n          setError(`Failed to load AI models (Server Error ${err.response.status})`);\n        } else if (err.request) {\n          // The request was made but no response was received\n          console.error('No response received from server:', err.request);\n          setError('Failed to load AI models (No response from server)');\n        } else {\n          // Something happened in setting up the request that triggered an Error\n          console.error('Error setting up request:', err.message);\n          setError(`Failed to load AI models (${err.message})`);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchModels();\n    // Removed selectedModel and onModelChange from dependency array to prevent potential loops\n    // if onModelChange causes re-renders frequently. Fetching should typically happen once on mount.\n    // If dynamic updates are needed based on external changes, reconsider dependencies.\n  }, []); // Changed dependency array\n\n  // Find the selected model to display its description\n  const selectedModelInfo = models.find(model => model.id === selectedModel);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      style: styles.label,\n      children: \"AI Model:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectedModel || '',\n      onChange: e => onModelChange(e.target.value),\n      disabled: isLoading,\n      style: styles.select,\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Loading models...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 23\n      }, this), error && /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Error loading models\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 19\n      }, this), !isLoading && !error && models.length === 0 && /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"No models available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 57\n      }, this), models.map(model => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: model.id,\n        children: model.name\n      }, model.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), selectedModelInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.description,\n      children: selectedModelInfo.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n_s(ModelSelector, \"IHhEQsgFpot2FZ6uFZRXNDWbL4A=\");\n_c = ModelSelector;\nexport default ModelSelector;\nvar _c;\n$RefreshReg$(_c, \"ModelSelector\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","styles","container","marginBottom","select","width","padding","borderRadius","border","backgroundColor","fontSize","outline","cursor","label","display","fontWeight","color","description","fontStyle","marginTop","ModelSelector","selectedModel","onModelChange","_s","models","setModels","isLoading","setIsLoading","error","setError","fetchModels","response","get","data","length","defaultModelExists","some","model","id","console","err","status","request","message","selectedModelInfo","find","style","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","disabled","map","name","_c","$RefreshReg$"],"sources":["C:/Users/viswa/Downloads/Latex resume writer ai/frontend/src/components/ModelSelector.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst styles = {\r\n  container: {\r\n    marginBottom: '8px',\r\n  },\r\n  select: {\r\n    width: '100%',\r\n    padding: '8px 10px',\r\n    borderRadius: '6px',\r\n    border: '1px solid #d1d5db',\r\n    backgroundColor: 'white',\r\n    fontSize: '13px',\r\n    outline: 'none',\r\n    cursor: 'pointer',\r\n    marginBottom: '4px',\r\n  },\r\n  label: {\r\n    display: 'block',\r\n    fontSize: '12px',\r\n    fontWeight: '600',\r\n    marginBottom: '4px',\r\n    color: '#4b5563',\r\n  },\r\n  description: {\r\n    fontSize: '11px',\r\n    color: '#6b7280',\r\n    fontStyle: 'italic',\r\n    marginTop: '2px',\r\n  }\r\n};\r\n\r\nfunction ModelSelector({ selectedModel, onModelChange }) {\r\n  const [models, setModels] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchModels = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null); // Reset error state on new fetch attempt\r\n        const response = await axios.get('http://localhost:5001/ai/models');\r\n        if (response.data && response.data.models) {\r\n          setModels(response.data.models);\r\n          \r\n          // Set default model if none selected and models are available\r\n          if (!selectedModel && response.data.models.length > 0) {\r\n            // Ensure the default model exists before setting it\r\n            const defaultModelExists = response.data.models.some(model => model.id === 'gpt4.1');\r\n            onModelChange(defaultModelExists ? 'gpt4.1' : response.data.models[0].id);\r\n          } else if (selectedModel && !response.data.models.some(model => model.id === selectedModel)) {\r\n            // If the currently selected model is no longer available, switch to the first available one\r\n            onModelChange(response.data.models.length > 0 ? response.data.models[0].id : null);\r\n          }\r\n        } else {\r\n          // Handle cases where the response might be successful but data is missing\r\n          console.error('Failed to fetch AI models: Invalid response structure', response.data);\r\n          setError('Failed to load AI models (Invalid response)');\r\n        }\r\n      } catch (err) {\r\n        // Log the detailed error object\r\n        console.error('Failed to fetch AI models:', err); \r\n        // Check for specific error types if needed (e.g., network error, server error)\r\n        if (err.response) {\r\n          // The request was made and the server responded with a status code\r\n          // that falls out of the range of 2xx\r\n          console.error('Server responded with error:', err.response.status, err.response.data);\r\n          setError(`Failed to load AI models (Server Error ${err.response.status})`);\r\n        } else if (err.request) {\r\n          // The request was made but no response was received\r\n          console.error('No response received from server:', err.request);\r\n          setError('Failed to load AI models (No response from server)');\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n          console.error('Error setting up request:', err.message);\r\n          setError(`Failed to load AI models (${err.message})`);\r\n        }\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchModels();\r\n    // Removed selectedModel and onModelChange from dependency array to prevent potential loops\r\n    // if onModelChange causes re-renders frequently. Fetching should typically happen once on mount.\r\n    // If dynamic updates are needed based on external changes, reconsider dependencies.\r\n  }, []); // Changed dependency array\r\n\r\n  // Find the selected model to display its description\r\n  const selectedModelInfo = models.find(model => model.id === selectedModel);\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <label style={styles.label}>AI Model:</label>\r\n      <select \r\n        value={selectedModel || ''}\r\n        onChange={(e) => onModelChange(e.target.value)}\r\n        disabled={isLoading}\r\n        style={styles.select}\r\n      >\r\n        {isLoading && <option value=\"\">Loading models...</option>}\r\n        {error && <option value=\"\">Error loading models</option>}\r\n        {!isLoading && !error && models.length === 0 && <option value=\"\">No models available</option>}\r\n        \r\n        {models.map(model => (\r\n          <option key={model.id} value={model.id}>\r\n            {model.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      \r\n      {selectedModelInfo && (\r\n        <div style={styles.description}>\r\n          {selectedModelInfo.description}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ModelSelector;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,MAAM,GAAG;EACbC,SAAS,EAAE;IACTC,YAAY,EAAE;EAChB,CAAC;EACDC,MAAM,EAAE;IACNC,KAAK,EAAE,MAAM;IACbC,OAAO,EAAE,UAAU;IACnBC,YAAY,EAAE,KAAK;IACnBC,MAAM,EAAE,mBAAmB;IAC3BC,eAAe,EAAE,OAAO;IACxBC,QAAQ,EAAE,MAAM;IAChBC,OAAO,EAAE,MAAM;IACfC,MAAM,EAAE,SAAS;IACjBT,YAAY,EAAE;EAChB,CAAC;EACDU,KAAK,EAAE;IACLC,OAAO,EAAE,OAAO;IAChBJ,QAAQ,EAAE,MAAM;IAChBK,UAAU,EAAE,KAAK;IACjBZ,YAAY,EAAE,KAAK;IACnBa,KAAK,EAAE;EACT,CAAC;EACDC,WAAW,EAAE;IACXP,QAAQ,EAAE,MAAM;IAChBM,KAAK,EAAE,SAAS;IAChBE,SAAS,EAAE,QAAQ;IACnBC,SAAS,EAAE;EACb;AACF,CAAC;AAED,SAASC,aAAaA,CAAC;EAAEC,aAAa;EAAEC;AAAc,CAAC,EAAE;EAAAC,EAAA;EACvD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAAC8B,SAAS,EAAEC,YAAY,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACgC,KAAK,EAAEC,QAAQ,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMiC,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACFH,YAAY,CAAC,IAAI,CAAC;QAClBE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QAChB,MAAME,QAAQ,GAAG,MAAMjC,KAAK,CAACkC,GAAG,CAAC,iCAAiC,CAAC;QACnE,IAAID,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACT,MAAM,EAAE;UACzCC,SAAS,CAACM,QAAQ,CAACE,IAAI,CAACT,MAAM,CAAC;;UAE/B;UACA,IAAI,CAACH,aAAa,IAAIU,QAAQ,CAACE,IAAI,CAACT,MAAM,CAACU,MAAM,GAAG,CAAC,EAAE;YACrD;YACA,MAAMC,kBAAkB,GAAGJ,QAAQ,CAACE,IAAI,CAACT,MAAM,CAACY,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,EAAE,KAAK,QAAQ,CAAC;YACpFhB,aAAa,CAACa,kBAAkB,GAAG,QAAQ,GAAGJ,QAAQ,CAACE,IAAI,CAACT,MAAM,CAAC,CAAC,CAAC,CAACc,EAAE,CAAC;UAC3E,CAAC,MAAM,IAAIjB,aAAa,IAAI,CAACU,QAAQ,CAACE,IAAI,CAACT,MAAM,CAACY,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,EAAE,KAAKjB,aAAa,CAAC,EAAE;YAC3F;YACAC,aAAa,CAACS,QAAQ,CAACE,IAAI,CAACT,MAAM,CAACU,MAAM,GAAG,CAAC,GAAGH,QAAQ,CAACE,IAAI,CAACT,MAAM,CAAC,CAAC,CAAC,CAACc,EAAE,GAAG,IAAI,CAAC;UACpF;QACF,CAAC,MAAM;UACL;UACAC,OAAO,CAACX,KAAK,CAAC,uDAAuD,EAAEG,QAAQ,CAACE,IAAI,CAAC;UACrFJ,QAAQ,CAAC,6CAA6C,CAAC;QACzD;MACF,CAAC,CAAC,OAAOW,GAAG,EAAE;QACZ;QACAD,OAAO,CAACX,KAAK,CAAC,4BAA4B,EAAEY,GAAG,CAAC;QAChD;QACA,IAAIA,GAAG,CAACT,QAAQ,EAAE;UAChB;UACA;UACAQ,OAAO,CAACX,KAAK,CAAC,8BAA8B,EAAEY,GAAG,CAACT,QAAQ,CAACU,MAAM,EAAED,GAAG,CAACT,QAAQ,CAACE,IAAI,CAAC;UACrFJ,QAAQ,CAAC,0CAA0CW,GAAG,CAACT,QAAQ,CAACU,MAAM,GAAG,CAAC;QAC5E,CAAC,MAAM,IAAID,GAAG,CAACE,OAAO,EAAE;UACtB;UACAH,OAAO,CAACX,KAAK,CAAC,mCAAmC,EAAEY,GAAG,CAACE,OAAO,CAAC;UAC/Db,QAAQ,CAAC,oDAAoD,CAAC;QAChE,CAAC,MAAM;UACL;UACAU,OAAO,CAACX,KAAK,CAAC,2BAA2B,EAAEY,GAAG,CAACG,OAAO,CAAC;UACvDd,QAAQ,CAAC,6BAA6BW,GAAG,CAACG,OAAO,GAAG,CAAC;QACvD;MACF,CAAC,SAAS;QACRhB,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDG,WAAW,CAAC,CAAC;IACb;IACA;IACA;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,MAAMc,iBAAiB,GAAGpB,MAAM,CAACqB,IAAI,CAACR,KAAK,IAAIA,KAAK,CAACC,EAAE,KAAKjB,aAAa,CAAC;EAE1E,oBACErB,OAAA;IAAK8C,KAAK,EAAE7C,MAAM,CAACC,SAAU;IAAA6C,QAAA,gBAC3B/C,OAAA;MAAO8C,KAAK,EAAE7C,MAAM,CAACY,KAAM;MAAAkC,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAC7CnD,OAAA;MACEoD,KAAK,EAAE/B,aAAa,IAAI,EAAG;MAC3BgC,QAAQ,EAAGC,CAAC,IAAKhC,aAAa,CAACgC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC/CI,QAAQ,EAAE9B,SAAU;MACpBoB,KAAK,EAAE7C,MAAM,CAACG,MAAO;MAAA2C,QAAA,GAEpBrB,SAAS,iBAAI1B,OAAA;QAAQoD,KAAK,EAAC,EAAE;QAAAL,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACxDvB,KAAK,iBAAI5B,OAAA;QAAQoD,KAAK,EAAC,EAAE;QAAAL,QAAA,EAAC;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACvD,CAACzB,SAAS,IAAI,CAACE,KAAK,IAAIJ,MAAM,CAACU,MAAM,KAAK,CAAC,iBAAIlC,OAAA;QAAQoD,KAAK,EAAC,EAAE;QAAAL,QAAA,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAE5F3B,MAAM,CAACiC,GAAG,CAACpB,KAAK,iBACfrC,OAAA;QAAuBoD,KAAK,EAAEf,KAAK,CAACC,EAAG;QAAAS,QAAA,EACpCV,KAAK,CAACqB;MAAI,GADArB,KAAK,CAACC,EAAE;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEb,CACT,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,EAERP,iBAAiB,iBAChB5C,OAAA;MAAK8C,KAAK,EAAE7C,MAAM,CAACgB,WAAY;MAAA8B,QAAA,EAC5BH,iBAAiB,CAAC3B;IAAW;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC5B,EAAA,CAvFQH,aAAa;AAAAuC,EAAA,GAAbvC,aAAa;AAyFtB,eAAeA,aAAa;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}