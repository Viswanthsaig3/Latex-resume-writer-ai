{"ast":null,"code":"import axios from 'axios';\n\n// Smart API URL detection\nconst getApiUrl = () => {\n  // If an environment variable is set, use that\n  if (process.env.REACT_APP_API_URL) {\n    return process.env.REACT_APP_API_URL;\n  }\n\n  // If we're running on the deployed domain, use the deployed backend URL\n  if (window.location.hostname === 'latex-resume-writer-ai-1.onrender.com') {\n    return 'https://latex-resume-writer-ai-1.onrender.com';\n  }\n\n  // Default to localhost for development\n  return 'http://localhost:5001';\n};\nconst API_URL = getApiUrl();\nconsole.log('Using API URL:', API_URL);\nexport const compileLatex = async latexCode => {\n  try {\n    console.log('Sending LaTeX to server at:', API_URL); // Log the actual URL being used\n    const response = await axios.post(`${API_URL}/compile`, {\n      latex: latexCode\n    });\n    console.log('Server response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Compilation error details:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\n\n// Add function to get AI models (if not already present or needs update)\nexport const getAIModels = async () => {\n  try {\n    console.log('Fetching AI models from:', API_URL);\n    const response = await axios.get(`${API_URL}/ai/models`);\n    console.log('AI Models response:', response.data);\n    return response.data.models || []; // Ensure it returns an array\n  } catch (error) {\n    var _error$response2;\n    console.error('Error fetching AI models:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    // Return fallback models or an empty array on error\n    // Consider importing FALLBACK_MODELS from ModelSelector if needed here\n    return [];\n  }\n};\n\n// Add function to call AI improvement endpoint (if not already present or needs update)\nexport const improveResumeAI = async (prompt, latex, modelId, templateName) => {\n  try {\n    console.log(`Sending AI request to ${API_URL}/ai/improve-resume`);\n    const response = await axios.post(`${API_URL}/ai/improve-resume`, {\n      prompt,\n      latex,\n      modelId,\n      templateName\n    }, {\n      timeout: 180000\n    }); // Use timeout from AIAssistant or configure here\n    console.log('AI response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    console.error('AI improvement error:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw error; // Re-throw to be handled in the component\n  }\n};","map":{"version":3,"names":["axios","getApiUrl","process","env","REACT_APP_API_URL","window","location","hostname","API_URL","console","log","compileLatex","latexCode","response","post","latex","data","error","_error$response","message","getAIModels","get","models","_error$response2","improveResumeAI","prompt","modelId","templateName","timeout","_error$response3"],"sources":["C:/Users/viswa/Downloads/Latex resume writer ai/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Smart API URL detection\r\nconst getApiUrl = () => {\r\n  // If an environment variable is set, use that\r\n  if (process.env.REACT_APP_API_URL) {\r\n    return process.env.REACT_APP_API_URL;\r\n  }\r\n  \r\n  // If we're running on the deployed domain, use the deployed backend URL\r\n  if (window.location.hostname === 'latex-resume-writer-ai-1.onrender.com') {\r\n    return 'https://latex-resume-writer-ai-1.onrender.com';\r\n  }\r\n  \r\n  // Default to localhost for development\r\n  return 'http://localhost:5001';\r\n};\r\n\r\nconst API_URL = getApiUrl();\r\n\r\nconsole.log('Using API URL:', API_URL);\r\n\r\nexport const compileLatex = async (latexCode) => {\r\n  try {\r\n    console.log('Sending LaTeX to server at:', API_URL); // Log the actual URL being used\r\n    const response = await axios.post(`${API_URL}/compile`, { latex: latexCode });\r\n    console.log('Server response:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Compilation error details:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Add function to get AI models (if not already present or needs update)\r\nexport const getAIModels = async () => {\r\n  try {\r\n    console.log('Fetching AI models from:', API_URL);\r\n    const response = await axios.get(`${API_URL}/ai/models`);\r\n    console.log('AI Models response:', response.data);\r\n    return response.data.models || []; // Ensure it returns an array\r\n  } catch (error) {\r\n    console.error('Error fetching AI models:', error.response?.data || error.message);\r\n    // Return fallback models or an empty array on error\r\n    // Consider importing FALLBACK_MODELS from ModelSelector if needed here\r\n    return []; \r\n  }\r\n};\r\n\r\n// Add function to call AI improvement endpoint (if not already present or needs update)\r\nexport const improveResumeAI = async (prompt, latex, modelId, templateName) => {\r\n  try {\r\n    console.log(`Sending AI request to ${API_URL}/ai/improve-resume`);\r\n    const response = await axios.post(`${API_URL}/ai/improve-resume`, {\r\n      prompt,\r\n      latex,\r\n      modelId,\r\n      templateName\r\n    }, { timeout: 180000 }); // Use timeout from AIAssistant or configure here\r\n    console.log('AI response:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('AI improvement error:', error.response?.data || error.message);\r\n    throw error; // Re-throw to be handled in the component\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}