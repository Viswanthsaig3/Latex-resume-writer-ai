{"ast":null,"code":"import axios from 'axios';\n\n// Base API URL with port fallback mechanism\nconst getApiUrl = () => {\n  // Primary: Use environment variable if available\n  if (process.env.REACT_APP_API_URL) {\n    return process.env.REACT_APP_API_URL;\n  }\n\n  // Fallback: Standard URL\n  return 'http://localhost:5001';\n};\nconst API_URL = getApiUrl();\n\n// Try connection with exponential backoff and port detection\nconst verifyApiConnection = async (maxRetries = 3) => {\n  let retries = 0;\n  const tryConnection = async port => {\n    try {\n      await axios.get(`http://localhost:${port}/ping`, {\n        timeout: 2000\n      });\n      return port; // If successful, return this port\n    } catch (error) {\n      return null; // Connection failed\n    }\n  };\n\n  // First try the default port\n  let currentPort = 5001;\n  let connectedPort = await tryConnection(currentPort);\n  if (connectedPort) return `http://localhost:${connectedPort}`;\n\n  // If that fails, try backup ports with increasing delays\n  while (retries < maxRetries) {\n    retries++;\n\n    // Try next few ports\n    for (let portOffset = 1; portOffset <= 5; portOffset++) {\n      currentPort = 5001 + portOffset;\n      connectedPort = await tryConnection(currentPort);\n      if (connectedPort) return `http://localhost:${connectedPort}`;\n    }\n\n    // Wait with exponential backoff before trying again\n    await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, retries)));\n  }\n\n  // Fall back to default if all attempts fail\n  return API_URL;\n};\n\n// Initialize with default URL, but try to detect the actual port\nlet apiBaseUrl = API_URL;\n\n// Try to detect the actual port on startup\nverifyApiConnection().then(detectedUrl => {\n  if (detectedUrl && detectedUrl !== apiBaseUrl) {\n    console.log(`API detected at ${detectedUrl}`);\n    apiBaseUrl = detectedUrl;\n  }\n}).catch(() => {\n  console.log(`Using default API URL: ${apiBaseUrl}`);\n});\nexport const compileLatex = async latexCode => {\n  try {\n    console.log('Sending LaTeX to server at:', apiBaseUrl);\n    const response = await axios.post(`${apiBaseUrl}/compile`, {\n      latex: latexCode\n    });\n    console.log('Server response:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Compilation error details:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","getApiUrl","process","env","REACT_APP_API_URL","API_URL","verifyApiConnection","maxRetries","retries","tryConnection","port","get","timeout","error","currentPort","connectedPort","portOffset","Promise","resolve","setTimeout","Math","pow","apiBaseUrl","then","detectedUrl","console","log","catch","compileLatex","latexCode","response","post","latex","data","_error$response","message"],"sources":["C:/Users/viswa/Downloads/Latex resume writer ai/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Base API URL with port fallback mechanism\r\nconst getApiUrl = () => {\r\n  // Primary: Use environment variable if available\r\n  if (process.env.REACT_APP_API_URL) {\r\n    return process.env.REACT_APP_API_URL;\r\n  }\r\n  \r\n  // Fallback: Standard URL\r\n  return 'http://localhost:5001';\r\n};\r\n\r\nconst API_URL = getApiUrl();\r\n\r\n// Try connection with exponential backoff and port detection\r\nconst verifyApiConnection = async (maxRetries = 3) => {\r\n  let retries = 0;\r\n  \r\n  const tryConnection = async (port) => {\r\n    try {\r\n      await axios.get(`http://localhost:${port}/ping`, { timeout: 2000 });\r\n      return port; // If successful, return this port\r\n    } catch (error) {\r\n      return null; // Connection failed\r\n    }\r\n  };\r\n  \r\n  // First try the default port\r\n  let currentPort = 5001;\r\n  let connectedPort = await tryConnection(currentPort);\r\n  if (connectedPort) return `http://localhost:${connectedPort}`;\r\n  \r\n  // If that fails, try backup ports with increasing delays\r\n  while (retries < maxRetries) {\r\n    retries++;\r\n    \r\n    // Try next few ports\r\n    for (let portOffset = 1; portOffset <= 5; portOffset++) {\r\n      currentPort = 5001 + portOffset;\r\n      connectedPort = await tryConnection(currentPort);\r\n      if (connectedPort) return `http://localhost:${connectedPort}`;\r\n    }\r\n    \r\n    // Wait with exponential backoff before trying again\r\n    await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, retries)));\r\n  }\r\n  \r\n  // Fall back to default if all attempts fail\r\n  return API_URL;\r\n};\r\n\r\n// Initialize with default URL, but try to detect the actual port\r\nlet apiBaseUrl = API_URL;\r\n\r\n// Try to detect the actual port on startup\r\nverifyApiConnection().then(detectedUrl => {\r\n  if (detectedUrl && detectedUrl !== apiBaseUrl) {\r\n    console.log(`API detected at ${detectedUrl}`);\r\n    apiBaseUrl = detectedUrl;\r\n  }\r\n}).catch(() => {\r\n  console.log(`Using default API URL: ${apiBaseUrl}`);\r\n});\r\n\r\nexport const compileLatex = async (latexCode) => {\r\n  try {\r\n    console.log('Sending LaTeX to server at:', apiBaseUrl);\r\n    const response = await axios.post(`${apiBaseUrl}/compile`, { latex: latexCode });\r\n    console.log('Server response:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Compilation error details:', error.response?.data || error.message);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACtB;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAE;IACjC,OAAOF,OAAO,CAACC,GAAG,CAACC,iBAAiB;EACtC;;EAEA;EACA,OAAO,uBAAuB;AAChC,CAAC;AAED,MAAMC,OAAO,GAAGJ,SAAS,CAAC,CAAC;;AAE3B;AACA,MAAMK,mBAAmB,GAAG,MAAAA,CAAOC,UAAU,GAAG,CAAC,KAAK;EACpD,IAAIC,OAAO,GAAG,CAAC;EAEf,MAAMC,aAAa,GAAG,MAAOC,IAAI,IAAK;IACpC,IAAI;MACF,MAAMV,KAAK,CAACW,GAAG,CAAC,oBAAoBD,IAAI,OAAO,EAAE;QAAEE,OAAO,EAAE;MAAK,CAAC,CAAC;MACnE,OAAOF,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,OAAOG,KAAK,EAAE;MACd,OAAO,IAAI,CAAC,CAAC;IACf;EACF,CAAC;;EAED;EACA,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIC,aAAa,GAAG,MAAMN,aAAa,CAACK,WAAW,CAAC;EACpD,IAAIC,aAAa,EAAE,OAAO,oBAAoBA,aAAa,EAAE;;EAE7D;EACA,OAAOP,OAAO,GAAGD,UAAU,EAAE;IAC3BC,OAAO,EAAE;;IAET;IACA,KAAK,IAAIQ,UAAU,GAAG,CAAC,EAAEA,UAAU,IAAI,CAAC,EAAEA,UAAU,EAAE,EAAE;MACtDF,WAAW,GAAG,IAAI,GAAGE,UAAU;MAC/BD,aAAa,GAAG,MAAMN,aAAa,CAACK,WAAW,CAAC;MAChD,IAAIC,aAAa,EAAE,OAAO,oBAAoBA,aAAa,EAAE;IAC/D;;IAEA;IACA,MAAM,IAAIE,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEb,OAAO,CAAC,CAAC,CAAC;EAChF;;EAEA;EACA,OAAOH,OAAO;AAChB,CAAC;;AAED;AACA,IAAIiB,UAAU,GAAGjB,OAAO;;AAExB;AACAC,mBAAmB,CAAC,CAAC,CAACiB,IAAI,CAACC,WAAW,IAAI;EACxC,IAAIA,WAAW,IAAIA,WAAW,KAAKF,UAAU,EAAE;IAC7CG,OAAO,CAACC,GAAG,CAAC,mBAAmBF,WAAW,EAAE,CAAC;IAC7CF,UAAU,GAAGE,WAAW;EAC1B;AACF,CAAC,CAAC,CAACG,KAAK,CAAC,MAAM;EACbF,OAAO,CAACC,GAAG,CAAC,0BAA0BJ,UAAU,EAAE,CAAC;AACrD,CAAC,CAAC;AAEF,OAAO,MAAMM,YAAY,GAAG,MAAOC,SAAS,IAAK;EAC/C,IAAI;IACFJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEJ,UAAU,CAAC;IACtD,MAAMQ,QAAQ,GAAG,MAAM9B,KAAK,CAAC+B,IAAI,CAAC,GAAGT,UAAU,UAAU,EAAE;MAAEU,KAAK,EAAEH;IAAU,CAAC,CAAC;IAChFJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEI,QAAQ,CAACG,IAAI,CAAC;IAC9C,OAAOH,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOpB,KAAK,EAAE;IAAA,IAAAqB,eAAA;IACdT,OAAO,CAACZ,KAAK,CAAC,4BAA4B,EAAE,EAAAqB,eAAA,GAAArB,KAAK,CAACiB,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBD,IAAI,KAAIpB,KAAK,CAACsB,OAAO,CAAC;IAClF,MAAMtB,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}